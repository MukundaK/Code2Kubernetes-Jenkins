pipeline {
    agent any
     options {
        // Configure GitHub project property
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/devtester1231/spring-petclinic')
        
        // Enable GitHub webhook trigger
    }
    triggers {
        githubPush()
    }
    environment {
                scannerHome = tool 'sonar'
                DOCKER_IMAGE = "devtester1231/jenkins-built-this-petclinic" // Docker image name
                DOCKER_TAG = "v2" // Docker image tag
                KUBE_NAMESPACE = "default" // Kubernetes namespace
                DEPLOYMENT_NAME = "k8s-pet-clinic" // Kubernetes Deployment name
            }

    stages {
        stage('SCM') {
            steps {
                git branch: 'main', changelog: false, poll: true, url: 'https://github.com/devtester1231/spring-petclinic'
            }
        }
        stage('maven compile'){
            steps {
                sh 'mvn clean compile -DskipTests=true'
            }
        }
        stage('sonar scanner'){
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                        sh '$scannerHome/bin/sonar-scanner -Dsonar.projectKey=pipe-project -Dsonar -Dsonar.java.binaries=. -Dsonar.projectName=spring-petclinic'
                    }
                }
            }
        }
        stage('maven install'){
            steps {
                sh 'mvn clean install -DskipTests=true'
            }
        }
        stage('dockerfile copy'){
            steps {
                script{
                    sh 'cp /home/ubuntu/Dockerfile .'
                }
            }
        }
        stage('docker build image'){
            steps {
                sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
            }
        }
        stage('docker push image'){
            steps {
                script {
                    withCredentials([string(credentialsId: 'docker', variable: 'docker_creds')]) {

                        sh 'echo ${docker_creds} | docker login -u devtester1231 --password-stdin'                    
                    }
                    sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                }
                
            }
        }
        stage('copy deployment.yaml'){
            steps {
                script{
                    sh 'cp /home/ubuntu/Desktop/deployment.yaml .'
                    sh 'cat deployment.yaml'
                   sh """ sed -i 's|image: .*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|' deployment.yaml"""
                }
            }
        }
        stage('deploy to kubernetes'){
            steps{
                script{
                    withKubeCredentials(kubectlCredentials: [[credentialsId: 'kubeconfig']]) {
                    
                        sh 'kubectl apply -f deployment.yaml'
                   
                }   
            }
            
            
        }
        
    }
}
}
